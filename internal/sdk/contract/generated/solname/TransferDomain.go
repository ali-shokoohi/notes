// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solname

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferDomain is the `transferDomain` instruction.
type TransferDomain struct {
	Name     *string
	Receiver *ag_solanago.PublicKey

	// [0] = [WRITE] domain
	//
	// [1] = [] mintSent
	//
	// [2] = [WRITE] senderWallet
	//
	// [3] = [WRITE] receiverWallet
	//
	// [4] = [WRITE, SIGNER] authority
	//
	// [5] = [] tokenProgram
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTransferDomainInstructionBuilder creates a new `TransferDomain` instruction builder.
func NewTransferDomainInstructionBuilder() *TransferDomain {
	nd := &TransferDomain{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetName sets the "name" parameter.
func (inst *TransferDomain) SetName(name string) *TransferDomain {
	inst.Name = &name
	return inst
}

// SetReceiver sets the "receiver" parameter.
func (inst *TransferDomain) SetReceiver(receiver ag_solanago.PublicKey) *TransferDomain {
	inst.Receiver = &receiver
	return inst
}

// SetDomainAccount sets the "domain" account.
func (inst *TransferDomain) SetDomainAccount(domain ag_solanago.PublicKey) *TransferDomain {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(domain).WRITE()
	return inst
}

// GetDomainAccount gets the "domain" account.
func (inst *TransferDomain) GetDomainAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintSentAccount sets the "mintSent" account.
func (inst *TransferDomain) SetMintSentAccount(mintSent ag_solanago.PublicKey) *TransferDomain {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mintSent)
	return inst
}

// GetMintSentAccount gets the "mintSent" account.
func (inst *TransferDomain) GetMintSentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSenderWalletAccount sets the "senderWallet" account.
func (inst *TransferDomain) SetSenderWalletAccount(senderWallet ag_solanago.PublicKey) *TransferDomain {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(senderWallet).WRITE()
	return inst
}

// GetSenderWalletAccount gets the "senderWallet" account.
func (inst *TransferDomain) GetSenderWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetReceiverWalletAccount sets the "receiverWallet" account.
func (inst *TransferDomain) SetReceiverWalletAccount(receiverWallet ag_solanago.PublicKey) *TransferDomain {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(receiverWallet).WRITE()
	return inst
}

// GetReceiverWalletAccount gets the "receiverWallet" account.
func (inst *TransferDomain) GetReceiverWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *TransferDomain) SetAuthorityAccount(authority ag_solanago.PublicKey) *TransferDomain {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *TransferDomain) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *TransferDomain) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *TransferDomain {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *TransferDomain) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *TransferDomain) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *TransferDomain {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *TransferDomain) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst TransferDomain) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TransferDomain,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferDomain) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferDomain) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.Receiver == nil {
			return errors.New("Receiver parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Domain is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MintSent is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SenderWallet is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ReceiverWallet is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *TransferDomain) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferDomain")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("Receiver", *inst.Receiver))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        domain", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      mintSent", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  senderWallet", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("receiverWallet", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj TransferDomain) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Receiver` param:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TransferDomain) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return err
	}
	return nil
}

// NewTransferDomainInstruction declares a new TransferDomain instruction with the provided parameters and accounts.
func NewTransferDomainInstruction(
	// Parameters:
	name string,
	receiver ag_solanago.PublicKey,
	// Accounts:
	domain ag_solanago.PublicKey,
	mintSent ag_solanago.PublicKey,
	senderWallet ag_solanago.PublicKey,
	receiverWallet ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *TransferDomain {
	return NewTransferDomainInstructionBuilder().
		SetName(name).
		SetReceiver(receiver).
		SetDomainAccount(domain).
		SetMintSentAccount(mintSent).
		SetSenderWalletAccount(senderWallet).
		SetReceiverWalletAccount(receiverWallet).
		SetAuthorityAccount(authority).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram)
}
