// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solname

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RegisterDomain is the `registerDomain` instruction.
type RegisterDomain struct {
	Name         *string
	PeriodYear   *uint8
	CreatorKey   *ag_solanago.PublicKey
	Uri          *string
	Title        *string
	PaymentToken *string

	// [0] = [WRITE] state
	//
	// [1] = [WRITE] domain
	//
	// [2] = [] chainlinkProgram
	//
	// [3] = [] chainlinkFeed
	//
	// [4] = [WRITE] receiver
	//
	// [5] = [WRITE] receiverAta
	//
	// [6] = [WRITE] payerAta
	//
	// [7] = [WRITE, SIGNER] mintAuthority
	//
	// [8] = [WRITE] mint
	//
	// [9] = [] tokenProgram
	//
	// [10] = [WRITE] metadata
	//
	// [11] = [WRITE] tokenAccount
	//
	// [12] = [] tokenMetadataProgram
	//
	// [13] = [] rent
	//
	// [14] = [WRITE] masterEdition
	//
	// [15] = [WRITE, SIGNER] authority
	//
	// [16] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRegisterDomainInstructionBuilder creates a new `RegisterDomain` instruction builder.
func NewRegisterDomainInstructionBuilder() *RegisterDomain {
	nd := &RegisterDomain{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetName sets the "name" parameter.
func (inst *RegisterDomain) SetName(name string) *RegisterDomain {
	inst.Name = &name
	return inst
}

// SetPeriodYear sets the "periodYear" parameter.
func (inst *RegisterDomain) SetPeriodYear(periodYear uint8) *RegisterDomain {
	inst.PeriodYear = &periodYear
	return inst
}

// SetCreatorKey sets the "creatorKey" parameter.
func (inst *RegisterDomain) SetCreatorKey(creatorKey ag_solanago.PublicKey) *RegisterDomain {
	inst.CreatorKey = &creatorKey
	return inst
}

// SetUri sets the "uri" parameter.
func (inst *RegisterDomain) SetUri(uri string) *RegisterDomain {
	inst.Uri = &uri
	return inst
}

// SetTitle sets the "title" parameter.
func (inst *RegisterDomain) SetTitle(title string) *RegisterDomain {
	inst.Title = &title
	return inst
}

// SetPaymentToken sets the "paymentToken" parameter.
func (inst *RegisterDomain) SetPaymentToken(paymentToken string) *RegisterDomain {
	inst.PaymentToken = &paymentToken
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *RegisterDomain) SetStateAccount(state ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *RegisterDomain) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDomainAccount sets the "domain" account.
func (inst *RegisterDomain) SetDomainAccount(domain ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(domain).WRITE()
	return inst
}

// GetDomainAccount gets the "domain" account.
func (inst *RegisterDomain) GetDomainAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetChainlinkProgramAccount sets the "chainlinkProgram" account.
func (inst *RegisterDomain) SetChainlinkProgramAccount(chainlinkProgram ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(chainlinkProgram)
	return inst
}

// GetChainlinkProgramAccount gets the "chainlinkProgram" account.
func (inst *RegisterDomain) GetChainlinkProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetChainlinkFeedAccount sets the "chainlinkFeed" account.
func (inst *RegisterDomain) SetChainlinkFeedAccount(chainlinkFeed ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(chainlinkFeed)
	return inst
}

// GetChainlinkFeedAccount gets the "chainlinkFeed" account.
func (inst *RegisterDomain) GetChainlinkFeedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetReceiverAccount sets the "receiver" account.
func (inst *RegisterDomain) SetReceiverAccount(receiver ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(receiver).WRITE()
	return inst
}

// GetReceiverAccount gets the "receiver" account.
func (inst *RegisterDomain) GetReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReceiverAtaAccount sets the "receiverAta" account.
func (inst *RegisterDomain) SetReceiverAtaAccount(receiverAta ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(receiverAta).WRITE()
	return inst
}

// GetReceiverAtaAccount gets the "receiverAta" account.
func (inst *RegisterDomain) GetReceiverAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayerAtaAccount sets the "payerAta" account.
func (inst *RegisterDomain) SetPayerAtaAccount(payerAta ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payerAta).WRITE()
	return inst
}

// GetPayerAtaAccount gets the "payerAta" account.
func (inst *RegisterDomain) GetPayerAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
func (inst *RegisterDomain) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(mintAuthority).WRITE().SIGNER()
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
func (inst *RegisterDomain) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMintAccount sets the "mint" account.
func (inst *RegisterDomain) SetMintAccount(mint ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *RegisterDomain) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *RegisterDomain) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *RegisterDomain) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *RegisterDomain) SetMetadataAccount(metadata ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *RegisterDomain) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenAccountAccount sets the "tokenAccount" account.
func (inst *RegisterDomain) SetTokenAccountAccount(tokenAccount ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenAccount).WRITE()
	return inst
}

// GetTokenAccountAccount gets the "tokenAccount" account.
func (inst *RegisterDomain) GetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *RegisterDomain) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *RegisterDomain) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetRentAccount sets the "rent" account.
func (inst *RegisterDomain) SetRentAccount(rent ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *RegisterDomain) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetMasterEditionAccount sets the "masterEdition" account.
func (inst *RegisterDomain) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(masterEdition).WRITE()
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
func (inst *RegisterDomain) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *RegisterDomain) SetAuthorityAccount(authority ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *RegisterDomain) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *RegisterDomain) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *RegisterDomain {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *RegisterDomain) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst RegisterDomain) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RegisterDomain,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RegisterDomain) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RegisterDomain) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.PeriodYear == nil {
			return errors.New("PeriodYear parameter is not set")
		}
		if inst.CreatorKey == nil {
			return errors.New("CreatorKey parameter is not set")
		}
		if inst.Uri == nil {
			return errors.New("Uri parameter is not set")
		}
		if inst.Title == nil {
			return errors.New("Title parameter is not set")
		}
		if inst.PaymentToken == nil {
			return errors.New("PaymentToken parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Domain is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ChainlinkProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ChainlinkFeed is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Receiver is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ReceiverAta is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PayerAta is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *RegisterDomain) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RegisterDomain")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("  PeriodYear", *inst.PeriodYear))
						paramsBranch.Child(ag_format.Param("  CreatorKey", *inst.CreatorKey))
						paramsBranch.Child(ag_format.Param("         Uri", *inst.Uri))
						paramsBranch.Child(ag_format.Param("       Title", *inst.Title))
						paramsBranch.Child(ag_format.Param("PaymentToken", *inst.PaymentToken))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              domain", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    chainlinkProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       chainlinkFeed", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            receiver", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         receiverAta", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            payerAta", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       mintAuthority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        tokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            metadata", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("               token", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("tokenMetadataProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                rent", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("       masterEdition", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("           authority", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj RegisterDomain) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `PeriodYear` param:
	err = encoder.Encode(obj.PeriodYear)
	if err != nil {
		return err
	}
	// Serialize `CreatorKey` param:
	err = encoder.Encode(obj.CreatorKey)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `Title` param:
	err = encoder.Encode(obj.Title)
	if err != nil {
		return err
	}
	// Serialize `PaymentToken` param:
	err = encoder.Encode(obj.PaymentToken)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RegisterDomain) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `PeriodYear`:
	err = decoder.Decode(&obj.PeriodYear)
	if err != nil {
		return err
	}
	// Deserialize `CreatorKey`:
	err = decoder.Decode(&obj.CreatorKey)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `Title`:
	err = decoder.Decode(&obj.Title)
	if err != nil {
		return err
	}
	// Deserialize `PaymentToken`:
	err = decoder.Decode(&obj.PaymentToken)
	if err != nil {
		return err
	}
	return nil
}

// NewRegisterDomainInstruction declares a new RegisterDomain instruction with the provided parameters and accounts.
func NewRegisterDomainInstruction(
	// Parameters:
	name string,
	periodYear uint8,
	creatorKey ag_solanago.PublicKey,
	uri string,
	title string,
	paymentToken string,
	// Accounts:
	state ag_solanago.PublicKey,
	domain ag_solanago.PublicKey,
	chainlinkProgram ag_solanago.PublicKey,
	chainlinkFeed ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	receiverAta ag_solanago.PublicKey,
	payerAta ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *RegisterDomain {
	return NewRegisterDomainInstructionBuilder().
		SetName(name).
		SetPeriodYear(periodYear).
		SetCreatorKey(creatorKey).
		SetUri(uri).
		SetTitle(title).
		SetPaymentToken(paymentToken).
		SetStateAccount(state).
		SetDomainAccount(domain).
		SetChainlinkProgramAccount(chainlinkProgram).
		SetChainlinkFeedAccount(chainlinkFeed).
		SetReceiverAccount(receiver).
		SetReceiverAtaAccount(receiverAta).
		SetPayerAtaAccount(payerAta).
		SetMintAuthorityAccount(mintAuthority).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram).
		SetMetadataAccount(metadata).
		SetTokenAccountAccount(tokenAccount).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetRentAccount(rent).
		SetMasterEditionAccount(masterEdition).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
