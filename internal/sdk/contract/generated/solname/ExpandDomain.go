// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solname

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ExpandDomain is the `expandDomain` instruction.
type ExpandDomain struct {
	Name   *string
	Period *uint8
	Unit   *PeriodType

	// [0] = [] state
	//
	// [1] = [WRITE] domain
	//
	// [2] = [] config
	//
	// [3] = [] chainlinkProgram
	//
	// [4] = [] chainlinkFeed
	//
	// [5] = [WRITE] receiver
	//
	// [6] = [WRITE, SIGNER] authority
	//
	// [7] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewExpandDomainInstructionBuilder creates a new `ExpandDomain` instruction builder.
func NewExpandDomainInstructionBuilder() *ExpandDomain {
	nd := &ExpandDomain{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetName sets the "name" parameter.
func (inst *ExpandDomain) SetName(name string) *ExpandDomain {
	inst.Name = &name
	return inst
}

// SetPeriod sets the "period" parameter.
func (inst *ExpandDomain) SetPeriod(period uint8) *ExpandDomain {
	inst.Period = &period
	return inst
}

// SetUnit sets the "unit" parameter.
func (inst *ExpandDomain) SetUnit(unit PeriodType) *ExpandDomain {
	inst.Unit = &unit
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *ExpandDomain) SetStateAccount(state ag_solanago.PublicKey) *ExpandDomain {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *ExpandDomain) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDomainAccount sets the "domain" account.
func (inst *ExpandDomain) SetDomainAccount(domain ag_solanago.PublicKey) *ExpandDomain {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(domain).WRITE()
	return inst
}

// GetDomainAccount gets the "domain" account.
func (inst *ExpandDomain) GetDomainAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetConfigAccount sets the "config" account.
func (inst *ExpandDomain) SetConfigAccount(config ag_solanago.PublicKey) *ExpandDomain {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *ExpandDomain) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetChainlinkProgramAccount sets the "chainlinkProgram" account.
func (inst *ExpandDomain) SetChainlinkProgramAccount(chainlinkProgram ag_solanago.PublicKey) *ExpandDomain {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(chainlinkProgram)
	return inst
}

// GetChainlinkProgramAccount gets the "chainlinkProgram" account.
func (inst *ExpandDomain) GetChainlinkProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetChainlinkFeedAccount sets the "chainlinkFeed" account.
func (inst *ExpandDomain) SetChainlinkFeedAccount(chainlinkFeed ag_solanago.PublicKey) *ExpandDomain {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(chainlinkFeed)
	return inst
}

// GetChainlinkFeedAccount gets the "chainlinkFeed" account.
func (inst *ExpandDomain) GetChainlinkFeedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReceiverAccount sets the "receiver" account.
func (inst *ExpandDomain) SetReceiverAccount(receiver ag_solanago.PublicKey) *ExpandDomain {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(receiver).WRITE()
	return inst
}

// GetReceiverAccount gets the "receiver" account.
func (inst *ExpandDomain) GetReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ExpandDomain) SetAuthorityAccount(authority ag_solanago.PublicKey) *ExpandDomain {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ExpandDomain) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ExpandDomain) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ExpandDomain {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ExpandDomain) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst ExpandDomain) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ExpandDomain,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ExpandDomain) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ExpandDomain) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.Period == nil {
			return errors.New("Period parameter is not set")
		}
		if inst.Unit == nil {
			return errors.New("Unit parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Domain is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ChainlinkProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ChainlinkFeed is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Receiver is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ExpandDomain) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ExpandDomain")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("Period", *inst.Period))
						paramsBranch.Child(ag_format.Param("  Unit", *inst.Unit))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          domain", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          config", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("chainlinkProgram", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   chainlinkFeed", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        receiver", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       authority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj ExpandDomain) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Period` param:
	err = encoder.Encode(obj.Period)
	if err != nil {
		return err
	}
	// Serialize `Unit` param:
	err = encoder.Encode(obj.Unit)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ExpandDomain) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Period`:
	err = decoder.Decode(&obj.Period)
	if err != nil {
		return err
	}
	// Deserialize `Unit`:
	err = decoder.Decode(&obj.Unit)
	if err != nil {
		return err
	}
	return nil
}

// NewExpandDomainInstruction declares a new ExpandDomain instruction with the provided parameters and accounts.
func NewExpandDomainInstruction(
	// Parameters:
	name string,
	period uint8,
	unit PeriodType,
	// Accounts:
	state ag_solanago.PublicKey,
	domain ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	chainlinkProgram ag_solanago.PublicKey,
	chainlinkFeed ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ExpandDomain {
	return NewExpandDomainInstructionBuilder().
		SetName(name).
		SetPeriod(period).
		SetUnit(unit).
		SetStateAccount(state).
		SetDomainAccount(domain).
		SetConfigAccount(config).
		SetChainlinkProgramAccount(chainlinkProgram).
		SetChainlinkFeedAccount(chainlinkFeed).
		SetReceiverAccount(receiver).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
