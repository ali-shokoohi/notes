// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solname

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetPrimaryDomain is the `setPrimaryDomain` instruction.
type SetPrimaryDomain struct {
	Name *string

	// [0] = [] domain
	//
	// [1] = [WRITE] primaryDomain
	//
	// [2] = [WRITE, SIGNER] authority
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetPrimaryDomainInstructionBuilder creates a new `SetPrimaryDomain` instruction builder.
func NewSetPrimaryDomainInstructionBuilder() *SetPrimaryDomain {
	nd := &SetPrimaryDomain{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetName sets the "name" parameter.
func (inst *SetPrimaryDomain) SetName(name string) *SetPrimaryDomain {
	inst.Name = &name
	return inst
}

// SetDomainAccount sets the "domain" account.
func (inst *SetPrimaryDomain) SetDomainAccount(domain ag_solanago.PublicKey) *SetPrimaryDomain {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(domain)
	return inst
}

// GetDomainAccount gets the "domain" account.
func (inst *SetPrimaryDomain) GetDomainAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPrimaryDomainAccount sets the "primaryDomain" account.
func (inst *SetPrimaryDomain) SetPrimaryDomainAccount(primaryDomain ag_solanago.PublicKey) *SetPrimaryDomain {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(primaryDomain).WRITE()
	return inst
}

// GetPrimaryDomainAccount gets the "primaryDomain" account.
func (inst *SetPrimaryDomain) GetPrimaryDomainAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *SetPrimaryDomain) SetAuthorityAccount(authority ag_solanago.PublicKey) *SetPrimaryDomain {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *SetPrimaryDomain) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *SetPrimaryDomain) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SetPrimaryDomain {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *SetPrimaryDomain) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst SetPrimaryDomain) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetPrimaryDomain,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetPrimaryDomain) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetPrimaryDomain) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Domain is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PrimaryDomain is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *SetPrimaryDomain) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetPrimaryDomain")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Name", *inst.Name))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       domain", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("primaryDomain", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj SetPrimaryDomain) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetPrimaryDomain) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	return nil
}

// NewSetPrimaryDomainInstruction declares a new SetPrimaryDomain instruction with the provided parameters and accounts.
func NewSetPrimaryDomainInstruction(
	// Parameters:
	name string,
	// Accounts:
	domain ag_solanago.PublicKey,
	primaryDomain ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *SetPrimaryDomain {
	return NewSetPrimaryDomainInstructionBuilder().
		SetName(name).
		SetDomainAccount(domain).
		SetPrimaryDomainAccount(primaryDomain).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
