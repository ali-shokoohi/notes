// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solname

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateProfile is the `updateProfile` instruction.
type UpdateProfile struct {
	Name        *string
	Profile     *Profile
	Socials     *SocialMedia
	Wallets     *Wallets
	TextRecords *[]TextRecord

	// [0] = [WRITE] domain
	//
	// [1] = [WRITE, SIGNER] authority
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateProfileInstructionBuilder creates a new `UpdateProfile` instruction builder.
func NewUpdateProfileInstructionBuilder() *UpdateProfile {
	nd := &UpdateProfile{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetName sets the "name" parameter.
func (inst *UpdateProfile) SetName(name string) *UpdateProfile {
	inst.Name = &name
	return inst
}

// SetProfile sets the "profile" parameter.
func (inst *UpdateProfile) SetProfile(profile Profile) *UpdateProfile {
	inst.Profile = &profile
	return inst
}

// SetSocials sets the "socials" parameter.
func (inst *UpdateProfile) SetSocials(socials SocialMedia) *UpdateProfile {
	inst.Socials = &socials
	return inst
}

// SetWallets sets the "wallets" parameter.
func (inst *UpdateProfile) SetWallets(wallets Wallets) *UpdateProfile {
	inst.Wallets = &wallets
	return inst
}

// SetTextRecords sets the "textRecords" parameter.
func (inst *UpdateProfile) SetTextRecords(textRecords []TextRecord) *UpdateProfile {
	inst.TextRecords = &textRecords
	return inst
}

// SetDomainAccount sets the "domain" account.
func (inst *UpdateProfile) SetDomainAccount(domain ag_solanago.PublicKey) *UpdateProfile {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(domain).WRITE()
	return inst
}

// GetDomainAccount gets the "domain" account.
func (inst *UpdateProfile) GetDomainAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UpdateProfile) SetAuthorityAccount(authority ag_solanago.PublicKey) *UpdateProfile {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UpdateProfile) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *UpdateProfile) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UpdateProfile {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *UpdateProfile) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst UpdateProfile) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateProfile,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateProfile) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateProfile) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.Profile == nil {
			return errors.New("Profile parameter is not set")
		}
		if inst.Socials == nil {
			return errors.New("Socials parameter is not set")
		}
		if inst.Wallets == nil {
			return errors.New("Wallets parameter is not set")
		}
		if inst.TextRecords == nil {
			return errors.New("TextRecords parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Domain is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *UpdateProfile) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateProfile")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("       Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("    Profile", *inst.Profile))
						paramsBranch.Child(ag_format.Param("    Socials", *inst.Socials))
						paramsBranch.Child(ag_format.Param("    Wallets", *inst.Wallets))
						paramsBranch.Child(ag_format.Param("TextRecords", *inst.TextRecords))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       domain", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateProfile) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Profile` param:
	err = encoder.Encode(obj.Profile)
	if err != nil {
		return err
	}
	// Serialize `Socials` param:
	err = encoder.Encode(obj.Socials)
	if err != nil {
		return err
	}
	// Serialize `Wallets` param:
	err = encoder.Encode(obj.Wallets)
	if err != nil {
		return err
	}
	// Serialize `TextRecords` param:
	err = encoder.Encode(obj.TextRecords)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateProfile) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Profile`:
	err = decoder.Decode(&obj.Profile)
	if err != nil {
		return err
	}
	// Deserialize `Socials`:
	err = decoder.Decode(&obj.Socials)
	if err != nil {
		return err
	}
	// Deserialize `Wallets`:
	err = decoder.Decode(&obj.Wallets)
	if err != nil {
		return err
	}
	// Deserialize `TextRecords`:
	err = decoder.Decode(&obj.TextRecords)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateProfileInstruction declares a new UpdateProfile instruction with the provided parameters and accounts.
func NewUpdateProfileInstruction(
	// Parameters:
	name string,
	profile Profile,
	socials SocialMedia,
	wallets Wallets,
	textRecords []TextRecord,
	// Accounts:
	domain ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *UpdateProfile {
	return NewUpdateProfileInstructionBuilder().
		SetName(name).
		SetProfile(profile).
		SetSocials(socials).
		SetWallets(wallets).
		SetTextRecords(textRecords).
		SetDomainAccount(domain).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram)
}
