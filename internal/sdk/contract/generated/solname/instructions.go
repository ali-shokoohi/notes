// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solname

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Solname"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_InitDns = ag_binary.TypeID([8]byte{7, 128, 77, 244, 70, 185, 198, 150})

	Instruction_RegisterDomain = ag_binary.TypeID([8]byte{236, 7, 208, 151, 173, 149, 73, 104})

	Instruction_UnregisterDomain = ag_binary.TypeID([8]byte{28, 190, 39, 122, 49, 163, 14, 182})

	Instruction_ExpandDomain = ag_binary.TypeID([8]byte{202, 77, 72, 63, 33, 68, 83, 189})

	Instruction_UpdateProfile = ag_binary.TypeID([8]byte{98, 67, 99, 206, 86, 115, 175, 1})

	Instruction_RegisterSubdomain = ag_binary.TypeID([8]byte{154, 193, 213, 248, 178, 51, 94, 37})

	Instruction_UnregisterSubdomain = ag_binary.TypeID([8]byte{97, 20, 78, 170, 51, 225, 239, 206})

	Instruction_SetPrimaryDomain = ag_binary.TypeID([8]byte{18, 2, 170, 172, 190, 140, 242, 27})

	Instruction_TransferDomain = ag_binary.TypeID([8]byte{129, 115, 193, 43, 174, 5, 241, 52})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitDns:
		return "InitDns"
	case Instruction_RegisterDomain:
		return "RegisterDomain"
	case Instruction_UnregisterDomain:
		return "UnregisterDomain"
	case Instruction_ExpandDomain:
		return "ExpandDomain"
	case Instruction_UpdateProfile:
		return "UpdateProfile"
	case Instruction_RegisterSubdomain:
		return "RegisterSubdomain"
	case Instruction_UnregisterSubdomain:
		return "UnregisterSubdomain"
	case Instruction_SetPrimaryDomain:
		return "SetPrimaryDomain"
	case Instruction_TransferDomain:
		return "TransferDomain"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"init_dns", (*InitDns)(nil),
		},
		{
			"register_domain", (*RegisterDomain)(nil),
		},
		{
			"unregister_domain", (*UnregisterDomain)(nil),
		},
		{
			"expand_domain", (*ExpandDomain)(nil),
		},
		{
			"update_profile", (*UpdateProfile)(nil),
		},
		{
			"register_subdomain", (*RegisterSubdomain)(nil),
		},
		{
			"unregister_subdomain", (*UnregisterSubdomain)(nil),
		},
		{
			"set_primary_domain", (*SetPrimaryDomain)(nil),
		},
		{
			"transfer_domain", (*TransferDomain)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
