// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solname

import ag_binary "github.com/gagliardetto/binary"

type Profile struct {
	Name     string
	Avatar   string
	Location string
	Website  string
	Shortbio string
}

func (obj Profile) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Avatar` param:
	err = encoder.Encode(obj.Avatar)
	if err != nil {
		return err
	}
	// Serialize `Location` param:
	err = encoder.Encode(obj.Location)
	if err != nil {
		return err
	}
	// Serialize `Website` param:
	err = encoder.Encode(obj.Website)
	if err != nil {
		return err
	}
	// Serialize `Shortbio` param:
	err = encoder.Encode(obj.Shortbio)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Profile) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Avatar`:
	err = decoder.Decode(&obj.Avatar)
	if err != nil {
		return err
	}
	// Deserialize `Location`:
	err = decoder.Decode(&obj.Location)
	if err != nil {
		return err
	}
	// Deserialize `Website`:
	err = decoder.Decode(&obj.Website)
	if err != nil {
		return err
	}
	// Deserialize `Shortbio`:
	err = decoder.Decode(&obj.Shortbio)
	if err != nil {
		return err
	}
	return nil
}

type SocialMedia struct {
	Telegram  string
	Discord   string
	Twitter   string
	Medium    string
	Facebook  string
	OtherLink string
}

func (obj SocialMedia) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Telegram` param:
	err = encoder.Encode(obj.Telegram)
	if err != nil {
		return err
	}
	// Serialize `Discord` param:
	err = encoder.Encode(obj.Discord)
	if err != nil {
		return err
	}
	// Serialize `Twitter` param:
	err = encoder.Encode(obj.Twitter)
	if err != nil {
		return err
	}
	// Serialize `Medium` param:
	err = encoder.Encode(obj.Medium)
	if err != nil {
		return err
	}
	// Serialize `Facebook` param:
	err = encoder.Encode(obj.Facebook)
	if err != nil {
		return err
	}
	// Serialize `OtherLink` param:
	err = encoder.Encode(obj.OtherLink)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SocialMedia) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Telegram`:
	err = decoder.Decode(&obj.Telegram)
	if err != nil {
		return err
	}
	// Deserialize `Discord`:
	err = decoder.Decode(&obj.Discord)
	if err != nil {
		return err
	}
	// Deserialize `Twitter`:
	err = decoder.Decode(&obj.Twitter)
	if err != nil {
		return err
	}
	// Deserialize `Medium`:
	err = decoder.Decode(&obj.Medium)
	if err != nil {
		return err
	}
	// Deserialize `Facebook`:
	err = decoder.Decode(&obj.Facebook)
	if err != nil {
		return err
	}
	// Deserialize `OtherLink`:
	err = decoder.Decode(&obj.OtherLink)
	if err != nil {
		return err
	}
	return nil
}

type Wallets struct {
	Btc string
	Eth string
	Sol string
}

func (obj Wallets) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Btc` param:
	err = encoder.Encode(obj.Btc)
	if err != nil {
		return err
	}
	// Serialize `Eth` param:
	err = encoder.Encode(obj.Eth)
	if err != nil {
		return err
	}
	// Serialize `Sol` param:
	err = encoder.Encode(obj.Sol)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Wallets) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Btc`:
	err = decoder.Decode(&obj.Btc)
	if err != nil {
		return err
	}
	// Deserialize `Eth`:
	err = decoder.Decode(&obj.Eth)
	if err != nil {
		return err
	}
	// Deserialize `Sol`:
	err = decoder.Decode(&obj.Sol)
	if err != nil {
		return err
	}
	return nil
}

type TextRecord struct {
	NameValue string
	Link      string
}

func (obj TextRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NameValue` param:
	err = encoder.Encode(obj.NameValue)
	if err != nil {
		return err
	}
	// Serialize `Link` param:
	err = encoder.Encode(obj.Link)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TextRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NameValue`:
	err = decoder.Decode(&obj.NameValue)
	if err != nil {
		return err
	}
	// Deserialize `Link`:
	err = decoder.Decode(&obj.Link)
	if err != nil {
		return err
	}
	return nil
}

type SubDomain struct {
	Name string
}

func (obj SubDomain) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SubDomain) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	return nil
}

type PeriodType ag_binary.BorshEnum

const (
	PeriodTypeYear PeriodType = iota
	PeriodTypeMonth
	PeriodTypeDay
	PeriodTypeHour
	PeriodTypeMinute
)

func (value PeriodType) String() string {
	switch value {
	case PeriodTypeYear:
		return "Year"
	case PeriodTypeMonth:
		return "Month"
	case PeriodTypeDay:
		return "Day"
	case PeriodTypeHour:
		return "Hour"
	case PeriodTypeMinute:
		return "Minute"
	default:
		return ""
	}
}
