// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solname

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitDns is the `initDns` instruction.
type InitDns struct {
	TopDomains *[]string

	// [0] = [WRITE] dnsState
	//
	// [1] = [WRITE, SIGNER] signer
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitDnsInstructionBuilder creates a new `InitDns` instruction builder.
func NewInitDnsInstructionBuilder() *InitDns {
	nd := &InitDns{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetTopDomains sets the "topDomains" parameter.
func (inst *InitDns) SetTopDomains(topDomains []string) *InitDns {
	inst.TopDomains = &topDomains
	return inst
}

// SetDnsStateAccount sets the "dnsState" account.
func (inst *InitDns) SetDnsStateAccount(dnsState ag_solanago.PublicKey) *InitDns {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(dnsState).WRITE()
	return inst
}

// GetDnsStateAccount gets the "dnsState" account.
func (inst *InitDns) GetDnsStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSignerAccount sets the "signer" account.
func (inst *InitDns) SetSignerAccount(signer ag_solanago.PublicKey) *InitDns {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(signer).WRITE().SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *InitDns) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitDns) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitDns {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitDns) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst InitDns) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitDns,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitDns) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitDns) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TopDomains == nil {
			return errors.New("TopDomains parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.DnsState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitDns) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitDns")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("TopDomains", *inst.TopDomains))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     dnsState", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       signer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj InitDns) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TopDomains` param:
	err = encoder.Encode(obj.TopDomains)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitDns) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TopDomains`:
	err = decoder.Decode(&obj.TopDomains)
	if err != nil {
		return err
	}
	return nil
}

// NewInitDnsInstruction declares a new InitDns instruction with the provided parameters and accounts.
func NewInitDnsInstruction(
	// Parameters:
	topDomains []string,
	// Accounts:
	dnsState ag_solanago.PublicKey,
	signer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitDns {
	return NewInitDnsInstructionBuilder().
		SetTopDomains(topDomains).
		SetDnsStateAccount(dnsState).
		SetSignerAccount(signer).
		SetSystemProgramAccount(systemProgram)
}
